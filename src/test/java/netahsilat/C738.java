package netahsilat;

import io.testproject.addon.ExcelOperations;
import io.testproject.addon.NetahsilatUtills;
import io.testproject.addon.RandomDataGenerator;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C738 Excel ile cari hesap aktarımı
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Fri Oct 07 11:06:39 GMT 2022.
 */
@DisplayName("C738 Excel ile cari hesap aktarımı")
public class C738 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C738 Excel ile cari hesap aktarımı")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String userName, String password, String currentDate,
      String faturaErpKodu, String faturaNumarasi, String dokumanKodu, String odemeLinki,
      String randomNumber) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodLogoutlogin methodlogoutlogin;
    NetahsilatUtills.ClickUntilGone clickUntilGone;
    RandomDataGenerator.GenerateNumberInRange generateNumberInRange;
    ExcelOperations.SetCellValue setCellValue;
    FileUpload.UploadFileElementAction uploadFileElementAction;

    // 1. Run Method Logout&Login
    GeneratedUtils.sleep(500);
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ApplicationURL;
    methodlogoutlogin.userName = ProjectParameters.genelEmail;
    methodlogoutlogin.password = ProjectParameters.genelPassword;
    methodlogoutlogin.execute(driver);

    // 2. Move mouse to 'moveCariHesapYonetimi'
    GeneratedUtils.sleep(500);
    by = By.cssSelector(".accountmanagement");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 3. Click 'moveCariHesapYonetimi'
    GeneratedUtils.sleep(500);
    by = By.cssSelector(".accountmanagement");
    driver.findElement(by).click();

    // 4. Click 'CARİ HESAP AKTARIMI'
    GeneratedUtils.sleep(500);
    by = By.xpath("//a[. = 'CARİ HESAP AKTARIMI']");
    driver.findElement(by).click();

    // 5. Generate random number between '10000000' and '99999999'
    GeneratedUtils.sleep(500);
    generateNumberInRange = RandomDataGenerator.generateNumberInRange("10000000","99999999");
    generateNumberInRange = (RandomDataGenerator.GenerateNumberInRange)((ReportingDriver)driver).addons().execute(generateNumberInRange);
    randomNumber = String.valueOf(generateNumberInRange.result);

    // 6. Set the value 'sartlibbayi_{{randomNumber}}' to cell '2','5'
    GeneratedUtils.sleep(500);
    setCellValue = ExcelOperations.setCellValue("C:\\TestProject\\C738_Cari_Hesap_Aktarım.xlsx","","5","2",String.format("sartlibbayi_%s",randomNumber));
    setCellValue = (ExcelOperations.SetCellValue)((ReportingDriver)driver).addons().execute(setCellValue);

    // 7. Uploads a file to a given element with the 'file' type
    //    "C:\TestProject\C738_Cari_Hesap_Aktarım.xlsx"
    GeneratedUtils.sleep(500);
    uploadFileElementAction = FileUpload.uploadFileElementAction("C:\\TestProject\\C738_Cari_Hesap_Aktarım.xlsx");
    by = By.cssSelector("#import");
    uploadFileElementAction = (FileUpload.UploadFileElementAction)((ReportingDriver)driver).addons().execute(uploadFileElementAction, by, -1);

    // 8. Click 'Tamam1'
    GeneratedUtils.sleep(500);
    by = By.xpath("//button[. = 'Tamam']");
    driver.findElement(by).click();

    // 9. Click 'Aktarımı Başlat'
    GeneratedUtils.sleep(500);
    by = By.xpath("//button[. = 'Aktarımı Başlat']");
    driver.findElement(by).click();

    // 10. Does 'dvSuccessMessage' contain 'Kaydedilen Toplam Kayıt : 1 Hata Oluşan Toplam Kayıt :0'?
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#dvSuccessMessage");
    Assertions.assertTrue(driver.findElement(by).getText().contains("Kaydedilen Toplam Kayıt : 1 Hata Oluşan Toplam Kayıt :0"));

    // 11. Move mouse to 'moveUstUyeYonetimi'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("li[class='content']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 12. Click 'ustUyeYonetimi'
    GeneratedUtils.sleep(500);
    by = By.xpath("//li[4]/a[. = 'ÜYE YÖNETİMİ']");
    driver.findElement(by).click();

    // 13. Click 'altUyeYonetimi'
    GeneratedUtils.sleep(500);
    by = By.xpath("//li[1]/a[. = 'ÜYE YÖNETİMİ']");
    driver.findElement(by).click();

    // 14. Type '390017614' in 'SearchVendorName'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#SearchVendorName");
    driver.findElement(by).sendKeys("390017614");

    // 15. Click '//div[contains(text(),'390017614')] '
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    GeneratedUtils.sleep(500);
    by = By.xpath("//div[contains(text(),'390017614')] ");
    driver.findElement(by).click();
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 16. Click 'btnListele'
    GeneratedUtils.sleep(500);
    by = By.xpath("//button[. = 'Listele']");
    driver.findElement(by).click();

    // 17. Is 'sartlibayi ROW1' visible?
    GeneratedUtils.sleep(500);
    by = By.xpath("//tr[1]//td[. = 'sartlibayi@bayi.com']");
    driver.findElement(by).isDisplayed();

    // 18. Click 'EditButton'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("img[src*='fugue/edit.png']");
    driver.findElement(by).click();

    // 19. Click 'btnCariHesaplar'
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    GeneratedUtils.sleep(500);
    by = By.cssSelector("img[src*='Paper-Money-icon.png']");
    driver.findElement(by).click();
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 20. Does 'Entity.CurrentAccounts[1].ErpCode' contain 'sartlibbayi'?
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#Entity_CurrentAccounts_1__ErpCode");
    Assertions.assertTrue(driver.findElement(by).getText().contains("sartlibbayi"));

    // 21. Does 'Entity.CurrentAccounts[1].Name' contain 'excelleaktarilan'?
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#Entity_CurrentAccounts_1__Name");
    Assertions.assertTrue(driver.findElement(by).getText().contains("excelleaktarilan"));

    // 22. Does 'Entity.CurrentAccounts[1].Description' contain 'C738'?
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#Entity_CurrentAccounts_1__Description");
    Assertions.assertTrue(driver.findElement(by).getText().contains("C738"));

    // 23. Does 'TD5' contain 'TL'?
    GeneratedUtils.sleep(500);
    by = By.xpath("//tr[3]/td[9]");
    Assertions.assertTrue(driver.findElement(by).getText().contains("TL"));

    // 24. Does 'Varsayılan ödeme seti2' contain 'Varsayılan ödeme seti'?
    GeneratedUtils.sleep(500);
    by = By.xpath("//tr[3]//span[. = 'Varsayılan ödeme seti']");
    Assertions.assertTrue(driver.findElement(by).getText().contains("Varsayılan ödeme seti"));

    // 25. Is 'ÖdemeGörünürRow2' visible?
    GeneratedUtils.sleep(500);
    by = By.cssSelector("input[id='Entity_CurrentAccounts_1__IsVisibleOnSimplePaymentSection'][checked='checked']");
    driver.findElement(by).isDisplayed();

    // 26. Is 'ödemeKalmGörünürRow2' visible?
    GeneratedUtils.sleep(500);
    by = By.cssSelector("input[id='Entity_CurrentAccounts_1__IsVisibleOnPaymentWithPaymentItemSection'][checked='checked']");
    driver.findElement(by).isDisplayed();

    // 27. Is 'altBayiKullanırRow2' visible?
    GeneratedUtils.sleep(500);
    by = By.cssSelector("input[id='Entity_CurrentAccounts_1__IsUsableBySubVendor'][checked='checked']");
    driver.findElement(by).isDisplayed();

    // 28. Click 'SilImage'
    GeneratedUtils.sleep(500);
    by = By.xpath("(//img[@title='Sil'])[2]");
    driver.findElement(by).click();

    // 29. Run Click Until Gone
    GeneratedUtils.sleep(500);
    clickUntilGone = NetahsilatUtills.clickUntilGone(120);
    by = By.xpath("//button[. = 'Tamam']");
    clickUntilGone = (NetahsilatUtills.ClickUntilGone)((ReportingDriver)driver).addons().execute(clickUntilGone, by, -1);

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon.netahsilatdemo.com/Account/LogOff","otomasyon@test.com","Kd!cyhz4","","","","","",""));
  }
}
