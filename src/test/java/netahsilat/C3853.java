package netahsilat;

import io.testproject.addon.TypeTextSlowly;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C3853 MP - Kredi Kartlarım OTP olmayan üye de ilk açılışta OTP ekranı gelmesi
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Fri Oct 07 11:41:15 GMT 2022.
 */
@DisplayName("C3853 MP - Kredi Kartlarım OTP olmayan üye de ilk açılışta OTP ekranı gelmesi")
public class C3853 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C3853 MP - Kredi Kartlarım OTP olmayan üye de ilk açılışta OTP ekranı gelmesi")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodLogin methodlogin;
    TypeTextSlowly.TypeTextWithControlledSpeed typeTextWithControlledSpeed;

    // 1. Navigate to '{{Otomasyon2Logout}}'
    GeneratedUtils.sleep(500);
    driver.navigate().to(ProjectParameters.Otomasyon2Logout);

    // 2. Run Method Login
    GeneratedUtils.sleep(500);
    methodlogin = new MethodLogin();
    methodlogin.ApplicationURL = "https://otomasyon2.netahsilatdemo.com/";
    methodlogin.userName = "masterpassotp@test.com";
    methodlogin.password = ProjectParameters.genelPassword;
    methodlogin.execute(driver);

    // 3. Click 'KREDI KARTLARIM'
    GeneratedUtils.sleep(500);
    by = By.xpath("//a[. = 'KREDİ KARTLARIM']");
    driver.findElement(by).click();

    // 4. Click 'YENİ KREDİ KARTI TANIMLA'
    GeneratedUtils.sleep(500);
    by = By.xpath("//a[. = 'YENİ KREDİ KARTI TANIMLA']");
    driver.findElement(by).click();

    // 5. Type 'MerchantSafe' in 'Kart üzerindeki isim'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#CardHolderName");
    driver.findElement(by).sendKeys("MerchantSafe");

    // 6. Type '44444444440' in 'TKC'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#TKC");
    driver.findElement(by).sendKeys("44444444440");

    // 7. Click 'MasterpassReadAndConfirmTerms'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("[name='MasterpassReadAndConfirmTerms']");
    driver.findElement(by).click();

    // 8. Type text to a TextField element with a delay between characters.
    GeneratedUtils.sleep(500);
    typeTextWithControlledSpeed = TypeTextSlowly.typeTextWithControlledSpeed("5555555555",0);
    by = By.cssSelector("#Phone");
    typeTextWithControlledSpeed = (TypeTextSlowly.TypeTextWithControlledSpeed)((ReportingDriver)driver).addons().execute(typeTextWithControlledSpeed, by, -1);

    // 9. Type text to a TextField element with a delay between characters.
    GeneratedUtils.sleep(500);
    typeTextWithControlledSpeed = TypeTextSlowly.typeTextWithControlledSpeed("4355084355084358",0);
    by = By.cssSelector("#CardNumber");
    typeTextWithControlledSpeed = (TypeTextSlowly.TypeTextWithControlledSpeed)((ReportingDriver)driver).addons().execute(typeTextWithControlledSpeed, by, -1);

    // 10. Type text to a TextField element with a delay between characters.
    GeneratedUtils.sleep(500);
    typeTextWithControlledSpeed = TypeTextSlowly.typeTextWithControlledSpeed("1226",0);
    by = By.cssSelector("#CardExpireDate");
    typeTextWithControlledSpeed = (TypeTextSlowly.TypeTextWithControlledSpeed)((ReportingDriver)driver).addons().execute(typeTextWithControlledSpeed, by, -1);

    // 11. Type '000' in 'CVV'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#CardCvv");
    driver.findElement(by).sendKeys("000");

    // 12. Click 'Kaydet3'
    GeneratedUtils.sleep(500);
    by = By.xpath("//button[@class='btn btn-primary btn-success']");
    driver.findElement(by).click();

    // 13. Is 'IMG3' present?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(60000, TimeUnit.MILLISECONDS);
    GeneratedUtils.sleep(500);
    by = By.xpath("//div[@id='masterpass-modal']//div[contains(@data-bind,'send-otp-mfs')]//img");
    driver.findElement(by);
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 14. Is 'TAMAM1' is clickable?
    GeneratedUtils.sleep(500);
    by = By.xpath("(//button[text()='TAMAM'])[2]");
    (new WebDriverWait(driver, 15)).until(ExpectedConditions.elementToBeClickable(by));

    // 15. Is 'TEKRAR GÖNDER' is clickable?
    GeneratedUtils.sleep(500);
    by = By.xpath("//div[2]//button[. = 'TEKRAR GÖNDER']");
    (new WebDriverWait(driver, 15)).until(ExpectedConditions.elementToBeClickable(by));

    // 16. Is '02:20' present?
    GeneratedUtils.sleep(500);
    by = By.xpath("(//*[text()='TAMAM'])[2]/..//div");
    driver.findElement(by);

    // 17. Is 'DIV1' present?
    GeneratedUtils.sleep(500);
    by = By.xpath("//div[3]/div[2]/div[2]");
    driver.findElement(by);

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon2.netahsilatdemo.com/"));
  }
}
