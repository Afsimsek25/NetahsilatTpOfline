package netahsilat;

import io.testproject.addon.GetDataFromGridWithSpecificLocator;
import io.testproject.addon.JSActions;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C1917-Bayi ve müşteriler kurumsal ise ad-soyad kısmı maskelenmeyecek
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Mon Oct 10 08:38:19 GMT 2022.
 */
@DisplayName("C1917-Bayi ve müşteriler kurumsal ise ad-soyad kısmı maskelenmeyecek")
public class C1917 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C1917-Bayi ve müşteriler kurumsal ise ad-soyad kısmı maskelenmeyecek")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String password, String userName, String ApplicationURL, String text,
      String currentDateTime) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodRefreshLoadingControl methodrefreshloadingcontrol;
    MethodLogoutlogin methodlogoutlogin;
    JSActions.ClickAction clickAction;
    GetDataFromGridWithSpecificLocator.GetData getData;

    // 1. Run Method Logout&Login
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ProjectParameters.Otomasyon3Logout;
    methodlogoutlogin.userName = ProjectParameters.genelEmail;
    methodlogoutlogin.password = ProjectParameters.genelPassword;
    methodlogoutlogin.execute(driver);
    currentDateTime = String.valueOf(methodlogoutlogin.currentDateTime);

    // 2. Click 'altUyeYonetimi'
    clickAction = JSActions.getClickAction();
    by = By.xpath("//li[1]/a[. = 'ÜYE YÖNETİMİ']");
    clickAction = (JSActions.ClickAction)((ReportingDriver)driver).addons().execute(clickAction, by, -1);

    // 3. This test was auto generated from steps of the 'C1909-Listelerde ki verilerin maskelenmesi' test
    methodrefreshloadingcontrol = new MethodRefreshLoadingControl();
    methodrefreshloadingcontrol.execute(driver);

    // 4. Type 'kurumsal' in 'SearchVendorNameVN'
    by = By.cssSelector("#SearchVendorName");
    driver.findElement(by).sendKeys("kurumsal");

    // 5. Click 'Kurumsal Firma'
    by = By.xpath("//div[. = 'Kurumsal Firma (E-Çözüm),,4********6']");
    driver.findElement(by).click();

    // 6. Click 'btnListele'
    by = By.xpath("//button[. = 'Listele']");
    driver.findElement(by).click();

    // 7. This test was auto generated from steps of the 'C1909-Listelerde ki verilerin maskelenmesi' test
    methodrefreshloadingcontrol = new MethodRefreshLoadingControl();
    methodrefreshloadingcontrol.execute(driver);

    // 8. Does 'bayi_kullaniciadiTCELL' contain 'Kurumsal Firma  '?
    by = By.xpath("//*[@id=\"VendorListGrid\"]/Table/Tbody/tr[1]/td[4]");
    Assertions.assertTrue(driver.findElement(by).getText().contains("Kurumsal Firma  "));

    // 9. Click 'İŞLEM LİSTESİ1'
    clickAction = JSActions.getClickAction();
    by = By.xpath("//a[. = 'İŞLEM LİSTESİ']");
    clickAction = (JSActions.ClickAction)((ReportingDriver)driver).addons().execute(clickAction, by, -1);

    // 10. Clear 'StartDate' contents
    by = By.cssSelector("#StartDate");
    driver.findElement(by).clear();

    // 11. Type '10.03.2022 00:00' in 'StartDate'
    by = By.cssSelector("#StartDate");
    driver.findElement(by).sendKeys("10.03.2022 00:00");

    // 12. Clear 'EndDate' contents
    by = By.cssSelector("#EndDate");
    driver.findElement(by).clear();

    // 13. Type '10.03.2022 23:00' in 'EndDate'
    by = By.cssSelector("#EndDate");
    driver.findElement(by).sendKeys("10.03.2022 23:00");

    // 14. Type 'kurumsal' in 'VendorNameTr'
    by = By.cssSelector("#VendorName");
    driver.findElement(by).sendKeys("kurumsal");

    // 15. Click 'Kurumsal Firma'
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.xpath("//div[. = 'Kurumsal Firma (E-Çözüm),,4********6']");
    driver.findElement(by).click();
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 16. Click 'btnListele'
    by = By.xpath("//button[. = 'Listele']");
    driver.findElement(by).click();

    // 17. This test was auto generated from steps of the 'C1909-Listelerde ki verilerin maskelenmesi' test
    methodrefreshloadingcontrol = new MethodRefreshLoadingControl();
    methodrefreshloadingcontrol.execute(driver);

    // 18. Get Data From Grid With Specific Locator
    getData = GetDataFromGridWithSpecificLocator.getData("div[class='t-widget t-grid'][id='VPosTransactionGrid']","Bayi/Kullanıcı Adı","Kurumsal Firma","Equals");
    getData = (GetDataFromGridWithSpecificLocator.GetData)((ReportingDriver)driver).addons().execute(getData);

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("Kd!cyhz4","otomasyon@test.com","https://otomasyon.netahsilatdemo.com/Account/LogOff","",""));
  }
}
