package netahsilat;

import io.testproject.addon.DateTimeOperations;
import io.testproject.addon.ListElementsUtils;
import io.testproject.addon.WebExtensions;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C613 Date Time Kontrolü
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Wed Oct 05 12:24:47 GMT 2022.
 */
@DisplayName("C613 Date Time Kontrolü")
public class C613 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C613 Date Time Kontrolü")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String userName, String password, String today) throws
      Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodLogoutlogin methodlogoutlogin;
    String string;
    ListElementsUtils.listElementsContainsText listElementsContainsText;
    DateTimeOperations.CurrentDate currentDate;
    WebExtensions.GetCssValue getCssValue;

    // 1. Run Method Logout&Login
    GeneratedUtils.sleep(500);
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ApplicationURL;
    methodlogoutlogin.userName = ProjectParameters.genelEmail;
    methodlogoutlogin.password = ProjectParameters.genelPassword;
    methodlogoutlogin.execute(driver);

    // 2. Move mouse to 'moveUstUyeYonetimi'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("li[class='content']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 3. Click 'ustUyeYonetimi'
    GeneratedUtils.sleep(500);
    by = By.xpath("//li[4]/a[. = 'ÜYE YÖNETİMİ']");
    driver.findElement(by).click();

    // 4. Click 'altUyeYonetimi'
    GeneratedUtils.sleep(500);
    by = By.xpath("//li[1]/a[. = 'ÜYE YÖNETİMİ']");
    driver.findElement(by).click();

    // 5. Move mouse to 'Open the calendar2'
    GeneratedUtils.sleep(500);
    by = By.xpath("//div[2]/div/div//span[. = 'Open the calendar']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 6. Click 'Open the calendar2'
    GeneratedUtils.sleep(500);
    by = By.xpath("//div[2]/div/div//span[. = 'Open the calendar']");
    driver.findElement(by).click();

    // 7. Get text from 'todayOnCalendar'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("td[class*='t-state-focus']");
    string = driver.findElement(by).getAttribute("value");
    today = String.valueOf(string);

    // 8. Get current date
    GeneratedUtils.sleep(500);
    currentDate = DateTimeOperations.currentDate("dd");
    currentDate = (DateTimeOperations.CurrentDate)((ReportingDriver)driver).addons().execute(currentDate);

    // 9. Clear 'SearchStartDate' contents
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#SearchStartDate");
    driver.findElement(by).clear();

    // 10. Type '12.12.2020' in 'SearchStartDate'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#SearchStartDate");
    driver.findElement(by).sendKeys("12.12.2020");

    // 11. Send 'ENTER' key(s)
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#InstallmentStartDate");
    (new Actions(driver)).sendKeys(GeneratedUtils.getKeys("ENTER")).build().perform();

    // 12. Get text from 'SearchStartDate'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#SearchStartDate");
    string = driver.findElement(by).getAttribute("value");
    Assertions.assertEquals("12.12.2020 00:00", string);

    // 13. Clear 'SearchStartDate' contents
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#SearchStartDate");
    driver.findElement(by).clear();

    // 14. Type 'furkan' in 'SearchStartDate'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#SearchStartDate");
    driver.findElement(by).sendKeys("furkan");

    // 15. Send 'ENTER' key(s)
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#InstallmentStartDate");
    (new Actions(driver)).sendKeys(GeneratedUtils.getKeys("ENTER")).build().perform();

    // 16. Get value of 'color' CSS property on 'SearchStartDate'
    GeneratedUtils.sleep(500);
    getCssValue = WebExtensions.getCssValue("color");
    by = By.cssSelector("#SearchStartDate");
    getCssValue = (WebExtensions.GetCssValue)((ReportingDriver)driver).addons().execute(getCssValue, by, -1);

    // 17. Clear 'SearchStartDate' contents
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#SearchStartDate");
    driver.findElement(by).clear();

    // 18. Click 'Open the time view5'
    GeneratedUtils.sleep(500);
    by = By.xpath("//div[2]/div/div//span[. = 'Open the time view']");
    driver.findElement(by).click();

    // 19. List Elements Contains Text
    GeneratedUtils.sleep(500);
    listElementsContainsText = ListElementsUtils.listElementsContainsText("4:30");
    by = By.cssSelector("ul[class='t-reset'] li");
    listElementsContainsText = (ListElementsUtils.listElementsContainsText)((ReportingDriver)driver).addons().execute(listElementsContainsText, by, -1);

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon.netahsilatdemo.com/Account/LogOff","otomasyon@test.com","Kd!cyhz4",""));
  }
}
