package netahsilat;

import io.testproject.addon.VisibleElementsOperations;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import java.lang.Exception;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C3265
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Sun Oct 09 20:54:27 GMT 2022.
 */
@DisplayName("C3265")
public class C3265 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C3265")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String userName, String password, String CurrentDate,
      String TwoMountsLater) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodLogin methodlogin;
    VisibleElementsOperations.ClickIfVisibleWeb clickIfVisibleWeb;

    // 1. Navigate to '{{Otomasyon2Logout}}'
    driver.navigate().to(ProjectParameters.Otomasyon2Logout);

    // 2. Run Method Login
    methodlogin = new MethodLogin();
    methodlogin.ApplicationURL = ApplicationURL;
    methodlogin.userName = ProjectParameters.genelEmail;
    methodlogin.password = ProjectParameters.genelPassword;
    methodlogin.execute(driver);

    // 3. Move mouse to 'moveUstUyeYonetimi'
    by = By.cssSelector("li[class='content']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 4. Click 'ustUyeYonetimi2'
    by = By.xpath("//li/a[. = 'ÜYE YÖNETİMİ']");
    driver.findElement(by).click();

    // 5. Click 'altUyeYonetimi'
    by = By.xpath("//li[1]/a[. = 'ÜYE YÖNETİMİ']");
    driver.findElement(by).click();

    // 6. Type 'netahsilatotomasyon@yandex.com' in 'SearchVendorName'
    by = By.cssSelector("#SearchVendorName");
    driver.findElement(by).sendKeys("netahsilatotomasyon@yandex.com");

    // 7. Click 'resultListelenen'
    by = By.xpath("//body/ul//div");
    driver.findElement(by).click();

    // 8. Click 'Listele'
    by = By.xpath("//button[. = 'Listele']");
    driver.findElement(by).click();

    // 9. Is 'Refresh' visible?
    GeneratedUtils.sleep(500);
    by = By.cssSelector("a[class='t-icon t-refresh']");
    driver.findElement(by).isDisplayed();

    // 10. Click 'Ödeme'
    by = By.xpath("//a[. = 'Ödeme']");
    driver.findElement(by).click();

    // 11. Switch to window '1'
    driver.switchTo().window(driver.getWindowHandles().toArray(new String[0])[1]);

    // 12. Click 'Masterpass Close button' if it's visible
    clickIfVisibleWeb = VisibleElementsOperations.clickIfVisibleWeb("3");
    by = By.xpath("//div[@data-bind=\"visible: masterPassStep() == 'mp-update-identity'\"]//button[@type='button'][normalize-space()='×']");
    clickIfVisibleWeb = (VisibleElementsOperations.ClickIfVisibleWeb)((ReportingDriver)driver).addons().execute(clickIfVisibleWeb, by, -1);

    // 13. Is 'Bireysel türk7' visible?
    by = By.xpath("//strong[. = 'Bireysel türk']");
    driver.findElement(by).isDisplayed();

    // 14. Click 'KART KAYDI LİNKİ'
    by = By.xpath("//a[. = 'KART KAYDI LİNKİ']");
    driver.findElement(by).click();

    // 15. Click 'QrTypeSelection'
    by = By.cssSelector("#QrTypeSelection");
    driver.findElement(by).click();

    // 16. Is 'carduser' visible and selected?
    by = By.cssSelector("[name='carduser']");
    (new WebDriverWait(driver, 15)).until(ExpectedConditions.elementSelectionStateToBe(by, true));

    // 17. Type 'test' in 'NewUserFullName'
    by = By.cssSelector("#NewUserFullName");
    driver.findElement(by).sendKeys("test");

    // 18. Type 'test@test.com' in 'NewUserEmail'
    by = By.cssSelector("#NewUserEmail");
    driver.findElement(by).sendKeys("test@test.com");

    // 19. Type '2222222222' in 'NewUserPhone'
    by = By.cssSelector("#NewUserPhone");
    driver.findElement(by).sendKeys("2222222222");

    // 20. Click 'Ekle'
    by = By.xpath("//button[. = 'Ekle']");
    driver.findElement(by).click();

    // 21. Click 'test radio button click'
    by = By.xpath("//td[text()='test']/..//td//input[@name]");
    driver.findElement(by).click();

    // 22. Is 'Bireysel türk radio button' visible and selected?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(25000, TimeUnit.MILLISECONDS);
    try {
      by = By.xpath("//td[text()='Bireysel türk']/..//td//input[@name]");
      (new WebDriverWait(driver, 25)).until(ExpectedConditions.elementSelectionStateToBe(by, true));
      Assertions.fail("Step 'Is 'Bireysel türk radio button' visible and selected?' result inverted, step failed");
    }
    catch (RuntimeException ex) {
    }
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 23. Click 'Kart Kaydetme Test Sil button'
    by = By.xpath("//td[text()='test']/..//a");
    driver.findElement(by).click();

    // 24. Click 'Bireysel türk radio button'
    by = By.xpath("//td[text()='Bireysel türk']/..//td//input[@name]");
    driver.findElement(by).click();

    // 25. Click 'Gönder'
    by = By.xpath("//button[. = 'Gönder']");
    driver.findElement(by).click();

    // 26. Is 'QR Kodu İmage' visible?
    by = By.xpath("//img[contains(@src,'data:image/png')]");
    driver.findElement(by).isDisplayed();

    // 27. Is 'İsim2' visible?
    by = By.xpath("//strong[. = 'İsim']");
    driver.findElement(by).isDisplayed();

    // 28. Is 'Telefon2' visible?
    by = By.xpath("//strong[. = 'Telefon']");
    driver.findElement(by).isDisplayed();

    // 29. Does 'Kart Kaydetme Telefon' contain '555********55'?
    by = By.xpath("//strong[text()='Telefon']/..//..//td[starts-with(text(),'555')]");
    Assertions.assertTrue(driver.findElement(by).getText().contains("555********55"));

    // 30. Is 'E-Posta2' visible?
    by = By.xpath("//strong[. = 'E-Posta']");
    driver.findElement(by).isDisplayed();

    // 31. Is 'İsim Bireysel Türk' visible?
    by = By.xpath("//strong[text()='İsim']/..//..//td[text()='Bireysel türk']");
    driver.findElement(by).isDisplayed();

    // 32. Does 'Kart Kaydetme E-Posta' contain 'ne*****************@ya********'?
    by = By.xpath("//strong[text()='E-Posta']/..//..//td[starts-with(text(),'ne')]");
    Assertions.assertTrue(driver.findElement(by).getText().contains("ne*****************@ya********"));

    // 33. Is 'Yazdır' visible?
    by = By.xpath("//button[. = '  Yazdır']");
    driver.findElement(by).isDisplayed();

    // 34. Is 'Geri' visible?
    by = By.xpath("//button[. = 'Geri']");
    driver.findElement(by).isDisplayed();

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon2.netahsilatdemo.com/","otomasyon@test.com","Kd!cyhz4","",""));
  }
}
