package netahsilat;

import io.testproject.addon.CombinedActions;
import io.testproject.addon.GridOperations;
import io.testproject.addon.NetahsilatUtills;
import io.testproject.addon.WebExtensions;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C4526 Rol Grubu Ekleme/Güncelleme/Sil (Bayi)
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Mon Oct 10 07:14:48 GMT 2022.
 */
@DisplayName("C4526 Rol Grubu Ekleme/Güncelleme/Sil (Bayi)")
public class C4526 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C4526 Rol Grubu Ekleme/Güncelleme/Sil (Bayi)")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String userName, String password, String currentDateTime)
      throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodLogin methodlogin;
    CombinedActions.ClearAndTypeAction clearAndTypeAction;
    WebExtensions.IsEnabled isEnabled;
    NetahsilatUtills.ClickUntilGone clickUntilGone;
    GridOperations.conditionalClick conditionalClick;

    // 1. Navigate to '{{Otomasyon3Logout}}'
    driver.navigate().to(ProjectParameters.Otomasyon3Logout);

    // 2. Run Method Login
    //    otomasyon@test.com
    methodlogin = new MethodLogin();
    methodlogin.ApplicationURL = ApplicationURL;
    methodlogin.userName = ProjectParameters.genelEmail;
    methodlogin.password = ProjectParameters.genelPassword;
    methodlogin.execute(driver);
    currentDateTime = String.valueOf(methodlogin.currentDateTime);

    // 3. Move mouse to 'moveToKullaniciYönetimi'
    by = By.cssSelector("li[class='user']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 4. Click 'KULLANICI YÖNETİMİ1'
    by = By.cssSelector("a[title='KULLANICI YÖNETİMİ']");
    driver.findElement(by).click();

    // 5. Click 'ROL YÖNETİMİ'
    by = By.xpath("//a[. = 'ROL YÖNETİMİ']");
    driver.findElement(by).click();

    // 6. Move mouse to 'Yeni Rol Grubu Tanımla DropdownMenu'
    by = By.xpath("//h1[text()='Yeni Rol Grubu Tanımla']/../div");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 7. Click 'Bayi Yetkisi'
    by = By.xpath("//li[@class='icon_musteri']/.//a[text()='Bayi Yetkisi']");
    driver.findElement(by).click();

    // 8. Type 'OtomasyonBayiAdmin' in 'Rol Grubu Adı'
    by = By.xpath("//input[@id='RoleGroupName']");
    driver.findElement(by).sendKeys("OtomasyonBayiAdmin");

    // 9. Does 'Yetki Tipi' contain 'Bayi'?
    by = By.cssSelector("#RoleGroupType");
    Assertions.assertTrue(driver.findElement(by).getText().contains("Bayi"));

    // 10. Run Is Enabled?
    isEnabled = WebExtensions.getIsEnabled();
    by = By.cssSelector("#RoleGroupType");
    isEnabled = (WebExtensions.IsEnabled)((ReportingDriver)driver).addons().execute(isEnabled, by, -1);

    // 11. Click 'Yeni Rol Ekle Yönetici Checkbox'
    by = By.cssSelector("#chckIsAdmin");
    driver.findElement(by).click();

    // 12. Is 'Yeni Rol Ekle Yönetici Checkbox' visible and selected?
    by = By.cssSelector("#chckIsAdmin");
    (new WebDriverWait(driver, 2)).until(ExpectedConditions.elementSelectionStateToBe(by, true));

    // 13. Click 'Tamam'
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    by = By.xpath("//button[. = 'Tamam']");
    driver.findElement(by).click();
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);

    // 14. Is 'Refresh' visible?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    by = By.xpath("//a[. = 'Refresh']");
    driver.findElement(by).isDisplayed();
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);

    // 15. Run Conditional Click
    conditionalClick = GridOperations.conditionalClick("//td[text()='OtomasyonBayiAdmin']",false);
    by = By.xpath("//span[. = 'next']");
    conditionalClick = (GridOperations.conditionalClick)((ReportingDriver)driver).addons().execute(conditionalClick, by, -1);

    // 16. Click 'OtomasyonBayiAdmin Düzenle'
    by = By.xpath("//td[text()='OtomasyonBayiAdmin']/..//img[contains(@src,'edit.png')]");
    driver.findElement(by).click();

    // 17. Run Clear 'rol Grubu Adı OtomasyonBayiAdmin' contents and type 'OtomasyonSiteAdminGüncelle'
    clearAndTypeAction = CombinedActions.clearAndTypeAction("OtomasyonSiteAdminGüncelle");
    by = By.xpath("//input[@id='RoleGroupName'][@value='OtomasyonBayiAdmin']");
    clearAndTypeAction = (CombinedActions.ClearAndTypeAction)((ReportingDriver)driver).addons().execute(clearAndTypeAction, by, -1);

    // 18. Click 'Yeni Rol Ekle Yönetici Checkbox'
    by = By.cssSelector("#chckIsAdmin");
    driver.findElement(by).click();

    // 19. Is 'Yeni Rol Ekle Yönetici Checkbox' visible and selected?
    //    INVERT STEP RESULT

    try {
      by = By.cssSelector("#chckIsAdmin");
      (new WebDriverWait(driver, 2)).until(ExpectedConditions.elementSelectionStateToBe(by, true));
      Assertions.fail("Step 'Is 'Yeni Rol Ekle Yönetici Checkbox' visible and selected?' result inverted, step failed");
    }
    catch (RuntimeException ex) {
    }

    // 20. Click 'Alt Bayi İşlemleri Checkbox'
    by = By.xpath("//span[text()='Alt Bayi İşlemleri']//..//input[2]");
    driver.findElement(by).click();

    // 21. Is 'Alt Bayi İşlemleri Checkbox' visible and selected?
    //    INVERT STEP RESULT

    try {
      by = By.xpath("//span[text()='Alt Bayi İşlemleri']//..//input[2]");
      (new WebDriverWait(driver, 2)).until(ExpectedConditions.elementSelectionStateToBe(by, true));
      Assertions.fail("Step 'Is 'Alt Bayi İşlemleri Checkbox' visible and selected?' result inverted, step failed");
    }
    catch (RuntimeException ex) {
    }

    // 22. Click 'Ödeme Yapma Checkbox'
    by = By.xpath("//span[text()='Ödeme Yapma']//..//input[2]");
    driver.findElement(by).click();

    // 23. Is 'Ödeme Yapma Checkbox' visible and selected?
    //    INVERT STEP RESULT

    try {
      by = By.xpath("//span[text()='Ödeme Yapma']//..//input[2]");
      (new WebDriverWait(driver, 2)).until(ExpectedConditions.elementSelectionStateToBe(by, true));
      Assertions.fail("Step 'Is 'Ödeme Yapma Checkbox' visible and selected?' result inverted, step failed");
    }
    catch (RuntimeException ex) {
    }

    // 24. Click 'Role Yönetimi checkbox'
    by = By.xpath("//span[text()='Role Yönetimi']//..//input[2]");
    driver.findElement(by).click();

    // 25. Is 'Role Yönetimi checkbox' visible and selected?
    //    INVERT STEP RESULT

    try {
      by = By.xpath("//span[text()='Role Yönetimi']//..//input[2]");
      (new WebDriverWait(driver, 2)).until(ExpectedConditions.elementSelectionStateToBe(by, true));
      Assertions.fail("Step 'Is 'Role Yönetimi checkbox' visible and selected?' result inverted, step failed");
    }
    catch (RuntimeException ex) {
    }

    // 26. Click 'Tamam'
    by = By.xpath("//button[. = 'Tamam']");
    driver.findElement(by).click();

    // 27. Is 'Refresh' visible?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    by = By.xpath("//a[. = 'Refresh']");
    driver.findElement(by).isDisplayed();
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);

    // 28. Click 'OtomasyonSiteAdminGüncelle Düzenle'
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    by = By.xpath("//td[text()='OtomasyonSiteAdminGüncelle']/..//img[contains(@src,'edit.png')]");
    driver.findElement(by).click();
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);

    // 29. Does 'Yetki Tipi' contain 'Bayi'?
    //    Yetki Tipi type in  Site ve Enabled  olma durumu validate
    by = By.cssSelector("#RoleGroupType");
    Assertions.assertTrue(driver.findElement(by).getText().contains("Bayi"));

    // 30. Run Is Enabled?
    isEnabled = WebExtensions.getIsEnabled();
    by = By.cssSelector("#RoleGroupType");
    isEnabled = (WebExtensions.IsEnabled)((ReportingDriver)driver).addons().execute(isEnabled, by, -1);

    // 31. Is 'Yeni Rol Ekle Yönetici Checkbox' visible and selected?
    //    INVERT STEP RESULT

    try {
      by = By.cssSelector("#chckIsAdmin");
      (new WebDriverWait(driver, 2)).until(ExpectedConditions.elementSelectionStateToBe(by, true));
      Assertions.fail("Step 'Is 'Yeni Rol Ekle Yönetici Checkbox' visible and selected?' result inverted, step failed");
    }
    catch (RuntimeException ex) {
    }

    // 32. Is 'Alt Bayi İşlemleri Checkbox' visible and selected?
    //    INVERT STEP RESULT

    try {
      by = By.xpath("//span[text()='Alt Bayi İşlemleri']//..//input[2]");
      (new WebDriverWait(driver, 2)).until(ExpectedConditions.elementSelectionStateToBe(by, true));
      Assertions.fail("Step 'Is 'Alt Bayi İşlemleri Checkbox' visible and selected?' result inverted, step failed");
    }
    catch (RuntimeException ex) {
    }

    // 33. Is 'Ödeme Yapma Checkbox' visible and selected?
    //    INVERT STEP RESULT

    try {
      by = By.xpath("//span[text()='Ödeme Yapma']//..//input[2]");
      (new WebDriverWait(driver, 2)).until(ExpectedConditions.elementSelectionStateToBe(by, true));
      Assertions.fail("Step 'Is 'Ödeme Yapma Checkbox' visible and selected?' result inverted, step failed");
    }
    catch (RuntimeException ex) {
    }

    // 34. Is 'Role Yönetimi checkbox' visible and selected?
    //    INVERT STEP RESULT

    try {
      by = By.xpath("//span[text()='Role Yönetimi']//..//input[2]");
      (new WebDriverWait(driver, 2)).until(ExpectedConditions.elementSelectionStateToBe(by, true));
      Assertions.fail("Step 'Is 'Role Yönetimi checkbox' visible and selected?' result inverted, step failed");
    }
    catch (RuntimeException ex) {
    }

    // 35. Click 'Tamam'
    by = By.xpath("//button[. = 'Tamam']");
    driver.findElement(by).click();

    // 36. Is 'Refresh' visible?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    by = By.xpath("//a[. = 'Refresh']");
    driver.findElement(by).isDisplayed();
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);

    // 37. Click 'OtomasyonSiteAdminGüncelle delete'
    by = By.xpath("//td[text()='OtomasyonSiteAdminGüncelle']/..//img[contains(@src,'trash.png')]");
    driver.findElement(by).click();

    // 38. Run Click Until Gone
    clickUntilGone = NetahsilatUtills.clickUntilGone(30);
    by = By.xpath("//button[. = 'Tamam']");
    clickUntilGone = (NetahsilatUtills.ClickUntilGone)((ReportingDriver)driver).addons().execute(clickUntilGone, by, -1);

    // 39. Is 'OtomasyonSiteAdminGüncelle' not present or invisible?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);
    by = By.xpath("//td[text()='OtomasyonSiteAdminGüncelle']");
    (new WebDriverWait(driver, 2)).until(ExpectedConditions.invisibilityOf(driver.findElement(by)));
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon3.netahsilatdemo.com/","otomasyon@test.com","Kd!cyhz4",""));
  }
}
