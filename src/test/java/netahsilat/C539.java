package netahsilat;

import io.testproject.addon.GridOperations;
import io.testproject.addon.StringUtils;
import io.testproject.addon.WebExtensions;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C539 İptal
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Thu Sep 29 17:38:09 GMT 2022.
 */
@DisplayName("C539 İptal")
public class C539 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C539 İptal")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String odemeReferansNumarasi, String password,
      String referansNumarasiOnGrid, String odemeReferansNumarasiRegex) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodLogoutlogin methodlogoutlogin;
    String string;
    Test01yeliksizdeme test01yeliksizdeme;
    WebExtensions.WaitForAlertPresence waitForAlertPresence;
    StringUtils.GetStringSubstring getStringSubstring;
    WebExtensions.IsDisabled isDisabled;
    WebExtensions.AcceptAlert acceptAlert;
    GridOperations.GetData getData;
    WebExtensions.GetAlertText getAlertText;

    // 1. üyelig oluşturmadan ödeme yapılabilme fonksiyonunun test edilmesi
    test01yeliksizdeme = new Test01yeliksizdeme();
    test01yeliksizdeme.ApplicationURL = ApplicationURL;
    test01yeliksizdeme.execute(driver);

    // 2. Get text from 'txtReferansNumarasi'
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(55555, TimeUnit.MILLISECONDS);
    by = By.xpath("(//p[@class='payment-result-text'])[1]");
    string = driver.findElement(by).getAttribute("value");
    odemeReferansNumarasi = String.valueOf(string);
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 3. Get substring of '{{odemeReferansNumarasi}}' from '42' to '[NONE]'
    getStringSubstring = StringUtils.getStringSubstring(42,0,odemeReferansNumarasi);
    getStringSubstring = (StringUtils.GetStringSubstring)((ReportingDriver)driver).addons().execute(getStringSubstring);
    odemeReferansNumarasiRegex = String.valueOf(getStringSubstring.result);

    // 1. Run Method Logout&Login
    GeneratedUtils.sleep(500);
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ApplicationURL;
    methodlogoutlogin.userName = ProjectParameters.genelEmail;
    methodlogoutlogin.password = ProjectParameters.genelPassword;
    methodlogoutlogin.execute(driver);

    // 5. Move mouse to 'moveToIslemler'
    by = By.cssSelector("li[class='tag']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 6. Click 'İŞLEMLER1'
    by = By.xpath("//a[. = 'İŞLEMLER']");
    driver.findElement(by).click();

    // 7. Click 'İŞLEM LİSTESİ'
    by = By.cssSelector("a[title='İŞLEM LİSTESİ']");
    driver.findElement(by).click();

    // 8. Is 'Refresh' visible?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.cssSelector("a[class='t-icon t-refresh']");
    driver.findElement(by).isDisplayed();
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 9. Run Get Data From Grid
    //    Referans - Parameters - Contains
    getData = GridOperations.getData("Referans",odemeReferansNumarasiRegex,"Contains");
    getData = (GridOperations.GetData)((ReportingDriver)driver).addons().execute(getData);

    // 10. Click 'imgİptal'
    by = By.cssSelector("img[src*='fugue/cross-circle.png']");
    driver.findElement(by).click();

    // 11. Does 'Yapılan İşlem Bilgisi' contain 'Yapılan İşlem Bilgisi'?
    by = By.xpath("//legend[. = 'Yapılan İşlem Bilgisi']");
    Assertions.assertTrue(driver.findElement(by).getText().contains("Yapılan İşlem Bilgisi"));

    // 12. Type 'test otomasyon * 2021' in 'TransactionDescripton'
    by = By.cssSelector("#TransactionDescripton");
    driver.findElement(by).sendKeys("test otomasyon * 2021");

    // 13. Does 'TransactionDescripton' contain '[NONE]'?
    by = By.cssSelector("#TransactionDescripton");
    Assertions.assertTrue(driver.findElement(by).getText().contains(""));

    // 14. Is 'TransactionDescripton' visible?
    by = By.cssSelector("#TransactionDescripton");
    driver.findElement(by).isDisplayed();

    // 15. Run Is Disabled?
    isDisabled = WebExtensions.getIsDisabled();
    by = By.xpath("//p/input[1]");
    isDisabled = (WebExtensions.IsDisabled)((ReportingDriver)driver).addons().execute(isDisabled, by, -1);

    // 16. Click 'buttonKaydiTamamla'
    by = By.xpath("//button[. = 'Tamam']");
    driver.findElement(by).click();

    // 17. Is 'txtIslemYapiliyor' visible?
    by = By.xpath("//*[text()='İşlem yapılıyor. Lütfen bekleyiniz...']");
    driver.findElement(by).isDisplayed();

    // 18. Is alert displayed?
    waitForAlertPresence = WebExtensions.waitForAlertPresence(70000);
    waitForAlertPresence = (WebExtensions.WaitForAlertPresence)((ReportingDriver)driver).addons().execute(waitForAlertPresence);

    // 19. Get alert text
    getAlertText = WebExtensions.getGetAlertText();
    getAlertText = (WebExtensions.GetAlertText)((ReportingDriver)driver).addons().execute(getAlertText);

    // 20. Accept alert
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(50000, TimeUnit.MILLISECONDS);
    acceptAlert = WebExtensions.acceptAlert(0);
    acceptAlert = (WebExtensions.AcceptAlert)((ReportingDriver)driver).addons().execute(acceptAlert);
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon.netahsilatdemo.com/Account/LogOff","","Kd!cyhz4","",""));
  }
}
