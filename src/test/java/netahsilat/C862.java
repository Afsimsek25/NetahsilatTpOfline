package netahsilat;

import io.testproject.addon.RandomDataGenerator;
import io.testproject.addon.VisibleElementsOperations;
import io.testproject.addon.WebExtensions;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C862 Bayi Limit Kullanımı Varken Bayi giriş yapıp limitten fazla üyeliksiz email order ile ödeme yapamamalı.
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Thu Oct 06 08:34:44 GMT 2022.
 */
@DisplayName("C862 Bayi Limit Kullanımı Varken Bayi giriş yapıp limitten fazla üyeliksiz email order ile ödeme yapamamalı.")
public class C862 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C862 Bayi Limit Kullanımı Varken Bayi giriş yapıp limitten fazla üyeliksiz email order ile ödeme yapamamalı.")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String userName, String password, String email,
      String emailPassword, String islemNo, String customerID, String referansNo) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodGeneldeme methodgeneldeme;
    MethodLogoutlogin methodlogoutlogin;
    WebExtensions.GetNumbersOnly getNumbersOnly;
    RandomDataGenerator.GenerateNumberInRange generateNumberInRange;
    VisibleElementsOperations.ClickIfVisibleWeb clickIfVisibleWeb;

    // 1. Navigate to '{{clearAllMail}}'
    GeneratedUtils.sleep(500);
    driver.navigate().to(ProjectParameters.clearAllMail);

    // 2. Run Method Logout&Login
    //    netahsilatlimitli@yandex.com
    GeneratedUtils.sleep(500);
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ApplicationURL;
    methodlogoutlogin.userName = "netahsilatlimitli@yandex.com";
    methodlogoutlogin.password = ProjectParameters.genelPassword;
    methodlogoutlogin.execute(driver);

    // 3. Move mouse to 'ÖDEME LİNKİ1'
    GeneratedUtils.sleep(500);
    by = By.xpath("//a[. = 'ÖDEME LİNKİ']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 4. Click 'ÖDEME LİNKİ GÖNDER'
    GeneratedUtils.sleep(500);
    by = By.xpath("//a[. = 'ÖDEME LİNKİ GÖNDER']");
    driver.findElement(by).click();

    // 5. Click 'SendSMS' if it's visible
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(1500, TimeUnit.MILLISECONDS);
    GeneratedUtils.sleep(500);
    clickIfVisibleWeb = VisibleElementsOperations.clickIfVisibleWeb("0");
    by = By.cssSelector("input[type='checkbox'][name='SendSMS']:checked");
    clickIfVisibleWeb = (VisibleElementsOperations.ClickIfVisibleWeb)((ReportingDriver)driver).addons().execute(clickIfVisibleWeb, by, -1);
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 6. Clear 'PureAmount' contents
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#PureAmount");
    driver.findElement(by).clear();

    // 7. Type '1453' in 'PureAmount'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#PureAmount");
    driver.findElement(by).sendKeys("1453");

    // 8. Generate random number between '[NONE]' and '999999999'
    GeneratedUtils.sleep(500);
    generateNumberInRange = RandomDataGenerator.generateNumberInRange("","999999999");
    generateNumberInRange = (RandomDataGenerator.GenerateNumberInRange)((ReportingDriver)driver).addons().execute(generateNumberInRange);
    islemNo = String.valueOf(generateNumberInRange.result);

    // 9. Type '{{islemNo}}' in 'ReferenceNumber'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#ReferenceNumber");
    driver.findElement(by).sendKeys(islemNo);

    // 10. Generate random number between '[NONE]' and '999999999'
    GeneratedUtils.sleep(500);
    generateNumberInRange = RandomDataGenerator.generateNumberInRange("","999999999");
    generateNumberInRange = (RandomDataGenerator.GenerateNumberInRange)((ReportingDriver)driver).addons().execute(generateNumberInRange);
    customerID = String.valueOf(generateNumberInRange.result);

    // 11. Type '{{customerID}}' in 'CustomerId'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#CustomerId");
    driver.findElement(by).sendKeys(customerID);

    // 12. Click 'btnDevamEt'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("input[type='button'][value='Devam Et']");
    driver.findElement(by).click();

    // 13. Type 'qa' in 'inputUnvan'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#DisplayName");
    driver.findElement(by).sendKeys("qa");

    // 14. Type 'furkan' in 'FullName'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#FullName");
    driver.findElement(by).sendKeys("furkan");

    // 15. Type '{{odemeEmail}}' in 'EMail'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#EMail");
    driver.findElement(by).sendKeys(ProjectParameters.odemeEmail);

    // 16. Type '5555555555' in 'Phone'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#Phone");
    driver.findElement(by).sendKeys("5555555555");

    // 17. Click 'Ekle'
    GeneratedUtils.sleep(500);
    by = By.xpath("//button[. = 'Ekle']");
    driver.findElement(by).click();

    // 18. Click 'unvanEkle'
    GeneratedUtils.sleep(500);
    by = By.xpath("//td[1]/input[@type=\"checkbox\"][@data-bind=\"visible: emailOrSmsCheckEnable(), checked: isChecked\"]");
    driver.findElement(by).click();

    // 19. Type 'e-mail order deneme' in 'Description'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#Description");
    driver.findElement(by).sendKeys("e-mail order deneme");

    // 20. Click 'emailGonder'
    GeneratedUtils.sleep(500);
    by = By.xpath("//div[5]/div[1]/input");
    driver.findElement(by).click();

    // 21. Is 'Ödeme linki gönderilmiştir' visible?
    GeneratedUtils.sleep(500);
    by = By.xpath("//p[. = 'Ödeme linki gönderilmiştir']");
    driver.findElement(by).isDisplayed();

    // 22. Navigate to '{{kontrolEmail}}{{islemNo}}'
    GeneratedUtils.sleep(500);
    driver.navigate().to(String.format("%s%s",ProjectParameters.kontrolEmail,islemNo));

    // 23. Return only numbers from the text
    GeneratedUtils.sleep(500);
    getNumbersOnly = WebExtensions.getGetNumbersOnly();
    by = By.cssSelector("#tutar");
    getNumbersOnly = (WebExtensions.GetNumbersOnly)((ReportingDriver)driver).addons().execute(getNumbersOnly, by, -1);

    // 24. Does '[id="islemno"]' contain '{{islemNo}}'?
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#islemno");
    Assertions.assertTrue(driver.findElement(by).getText().contains(islemNo));

    // 25. Click 'dogrulamaLinki'
    GeneratedUtils.sleep(500);
    by = By.xpath("//a");
    driver.findElement(by).click();

    // 26. Run Method Genel Ödeme
    GeneratedUtils.sleep(500);
    methodgeneldeme = new MethodGeneldeme();
    methodgeneldeme.ApplicationURL = ApplicationURL;
    methodgeneldeme.execute(driver);

    // 27. Click 'odemeTalimatıOlustur'
    GeneratedUtils.sleep(500);
    by = By.xpath("//div[4]/span/input");
    driver.findElement(by).click();

    // 28. Click 'btnNormalPayment'
    GeneratedUtils.sleep(500);
    by = By.cssSelector("#btnNormalPayment");
    driver.findElement(by).click();

    // 29. Does 'Ödeme çalıştığınız tutar ödeme limiti...' contain 'tutar ödeme limitinin üzerindedir'?
    GeneratedUtils.sleep(500);
    by = By.xpath("//li[. = 'Ödeme çalıştığınız tutar ödeme limitinin üzerindedir. Lütfen Anlık, Günlük, Aylık ödeme limitlerinizi kontrol ediniz.']");
    Assertions.assertTrue(driver.findElement(by).getText().contains("tutar ödeme limitinin üzerindedir"));

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon.netahsilatdemo.com/Account/LogOff","otomasyon@test.com","","otomasyon@e-cozum.com","kY2*m5J","","",""));
  }
}
