package netahsilat;

import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C815 Bayinin kullanıcısının Ödeme rolü yokken ödeme yapılamaması gerekiyor kontrol edilmeli
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Fri Oct 07 11:41:47 GMT 2022.
 */
@DisplayName("C815 Bayinin kullanıcısının Ödeme rolü yokken ödeme yapılamaması gerekiyor kontrol edilmeli")
public class C815 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C815 Bayinin kullanıcısının Ödeme rolü yokken ödeme yapılamaması gerekiyor kontrol edilmeli")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String userName, String password, String randomNumber) throws
      Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodLogoutlogin methodlogoutlogin;

    // 1. Run Method Logout&Login
    GeneratedUtils.sleep(500);
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ApplicationURL;
    methodlogoutlogin.userName = "odemeyapmaroluyok@test.com";
    methodlogoutlogin.password = "Kd!cyhz4";
    methodlogoutlogin.execute(driver);

    // 2. Does 'Ödeme Yapmak İçin Yetkiniz Yoktur.' contain 'Ödeme Yapmak İçin Yetkiniz Yoktur.'?
    GeneratedUtils.sleep(500);
    by = By.xpath("//div[. = 'Ödeme Yapmak İçin Yetkiniz Yoktur.']");
    Assertions.assertTrue(driver.findElement(by).getText().contains("Ödeme Yapmak İçin Yetkiniz Yoktur."));

    // 3. Click 'IMG102'
    GeneratedUtils.sleep(500);
    by = By.xpath("//div/div/div/a/img");
    driver.findElement(by).click();

    // 4. Is '//*[contains(text(),'Bu işleme hakkınız yok')]' visible?
    GeneratedUtils.sleep(500);
    by = By.xpath("//*[contains(text(),'Bu işleme hakkınız yok')]");
    driver.findElement(by).isDisplayed();

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon.netahsilatdemo.com/Account/LogOff","otomasyon@test.com","Kd!cyhz4",""));
  }
}
