package netahsilat;

import io.testproject.addon.ImapMailOperations;
import io.testproject.addon.StringUtils;
import io.testproject.addon.WebExtensions;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C548 İşlem Detay kontrolü
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Thu Sep 29 18:49:18 GMT 2022.
 */
@DisplayName("C548 İşlem Detay kontrolü")
public class C548 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C548 İşlem Detay kontrolü")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String currentDateTime, String oneWeekAgo, String tutarOnGrid,
      String tutarOnPrinPage, String provizyonTutari, String provizyonTutariWithRegex, String email,
      String emailPassword, String mailIcerikText) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodRefreshLoadingControl methodrefreshloadingcontrol;
    MethodLogoutlogin methodlogoutlogin;
    String string;
    WebExtensions.GetNumbersOnly getNumbersOnly;
    ImapMailOperations.ReadSpecificsMail readSpecificsMail;
    WebExtensions.ExecuteJavascript executeJavascript;
    StringUtils.StringContains stringContains;

    // 1. Run Method Logout&Login
    GeneratedUtils.sleep(500);
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ApplicationURL;
    methodlogoutlogin.userName = ProjectParameters.genelEmail;
    methodlogoutlogin.password = ProjectParameters.genelPassword;
    methodlogoutlogin.execute(driver);

    // 2. Move mouse to 'moveToIslemler'
    by = By.cssSelector("li[class='tag']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 3. Click 'İŞLEMLER1'
    by = By.xpath("//a[. = 'İŞLEMLER']");
    driver.findElement(by).click();

    // 4. Click 'İŞLEM LİSTESİ'
    by = By.cssSelector("a[title='İŞLEM LİSTESİ']");
    driver.findElement(by).click();

    // 5. This test was auto generated from steps of the 'C1909-Listelerde ki verilerin maskelenmesi' test
    methodrefreshloadingcontrol = new MethodRefreshLoadingControl();
    methodrefreshloadingcontrol.execute(driver);

    // 6. Move mouse to 'StartDate'
    by = By.cssSelector("#StartDate");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 7. Clear 'StartDate' contents
    by = By.cssSelector("#StartDate");
    driver.findElement(by).clear();

    // 8. Type 'NT56154P0000033046' in 'ReferenceNumber'
    //    HPM ile yapılmış sabit bir referans numarası aranır
    by = By.cssSelector("#ReferenceNumber");
    driver.findElement(by).sendKeys("NT56154P0000033046");

    // 9. Click 'btnListele'
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.xpath("//button[. = 'Listele']");
    driver.findElement(by).click();
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 10. This test was auto generated from steps of the 'C1909-Listelerde ki verilerin maskelenmesi' test
    methodrefreshloadingcontrol = new MethodRefreshLoadingControl();
    methodrefreshloadingcontrol.execute(driver);

    // 11. Get text from 'tutarColumn'
    by = By.cssSelector("#VPosTransactionGrid > table > tbody > tr > td:nth-child(4)");
    string = driver.findElement(by).getAttribute("value");
    tutarOnGrid = String.valueOf(string);

    // 12. Click 'islemDetaylari'
    by = By.cssSelector("img[src*='fugue/salesdetail.png']");
    driver.findElement(by).click();

    // 13. Get text from 'tutRoNpOPUP'
    by = By.xpath("//div[normalize-space()='Tutar']//following-sibling::div");
    string = driver.findElement(by).getAttribute("value");
    Assertions.assertEquals(tutarOnGrid, string);

    // 14. Get text from 'referansOnPopup'
    by = By.cssSelector("#details-table > div:nth-child(8) > div.colx2-right");
    string = driver.findElement(by).getAttribute("value");
    Assertions.assertTrue(string.startsWith("NT"));

    // 15. Click 'Bilgilendirme Formları'
    by = By.xpath("//a[. = 'Bilgilendirme Formları']");
    driver.findElement(by).click();

    // 16. Does 'Bilgilendirme Formları1' contain 'Bilgilendirme Formları'?
    by = By.xpath("//h1[. = 'Bilgilendirme Formları']");
    Assertions.assertTrue(driver.findElement(by).getText().contains("Bilgilendirme Formları"));

    // 17. Click 'Kapat5'
    by = By.xpath("//div/div/div[1]//button[. = 'Kapat']");
    driver.findElement(by).click();

    // 18. Click 'btnHpmDetaylari'
    by = By.xpath("//li[2]/a/img");
    driver.findElement(by).click();

    // 19. Does 'Teslimat Bilgileri' contain 'Teslimat Bilgileri'?
    by = By.xpath("//span[. = 'Teslimat Bilgileri']");
    Assertions.assertTrue(driver.findElement(by).getText().contains("Teslimat Bilgileri"));

    // 20. Does 'Kullanıcı Bilgileri' contain 'Kullanıcı Bilgileri'?
    by = By.xpath("//div[. = 'Kullanıcı Bilgileri']");
    Assertions.assertTrue(driver.findElement(by).getText().contains("Kullanıcı Bilgileri"));

    // 21. Get text from 'txtFiyatFromHpmDetaylari'
    by = By.cssSelector("#tab-hpm > div.task.no-task.with-legend > div.task-description > table > tbody > tr > td:nth-child(5)");
    string = driver.findElement(by).getAttribute("value");

    // 22. Click 'btnGenelBilgilerFromİslemDetaylari'
    by = By.xpath("//div[1]/div/ul/li[1]//img");
    driver.findElement(by).click();

    // 23. Move mouse to 'btnTalimatFormuFromİslemDetaylari'
    by = By.xpath("//form/div[1]/div[2]//div[2]");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 24. Click 'btnGoruntuleFromİslemDetaylari'
    by = By.cssSelector("#print");
    driver.findElement(by).click();

    // 25. Return only numbers from the text
    getNumbersOnly = WebExtensions.getGetNumbersOnly();
    by = By.xpath("//*[@id=\"paymentFormContent\"]/table[2]/tbody/tr[6]/td[2]");
    getNumbersOnly = (WebExtensions.GetNumbersOnly)((ReportingDriver)driver).addons().execute(getNumbersOnly, by, -1);
    provizyonTutari = String.valueOf(getNumbersOnly.output);

    // 26. Is '{{tutarOnGrid}}' contains '{{provizyonTutari}}'?
    stringContains = StringUtils.stringContains(tutarOnGrid,provizyonTutari,false,"true");
    stringContains = (StringUtils.StringContains)((ReportingDriver)driver).addons().execute(stringContains);

    // 27. Click 'kapatFromTalimatFormu'
    by = By.xpath("//div[1]//*[name()='svg']");
    driver.findElement(by).click();

    // 28. Is 'Yazdır' is clickable?
    by = By.xpath("//a[. = 'Yazdır']");
    (new WebDriverWait(driver, 15)).until(ExpectedConditions.elementToBeClickable(by));

    // 29. Click 'Yazdır'
    by = By.xpath("//a[. = 'Yazdır']");
    driver.findElement(by).click();

    // 30. Pause for '3000'ms
    driver.manage().timeouts().implicitlyWait(3000, TimeUnit.MILLISECONDS);

    // 31. Switch to window '1'
    driver.switchTo().window(driver.getWindowHandles().toArray(new String[0])[1]);

    // 32. Execute JavaScript 'document.querySelector('print-preview-app').shadowRoot.querySelector('print-preview-sidebar').shadowRoot.querySelector('print-preview-button-strip').shadowRoot.querySelector('.cancel-button').click()' with arguments '[NONE]'
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    executeJavascript = WebExtensions.executeJavascript("document.querySelector('print-preview-app').shadowRoot.querySelector('print-preview-sidebar').shadowRoot.querySelector('print-preview-button-strip').shadowRoot.querySelector('.cancel-button').click()","");
    executeJavascript = (WebExtensions.ExecuteJavascript)((ReportingDriver)driver).addons().execute(executeJavascript);
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 33. Switch to window '1'
    driver.switchTo().window(driver.getWindowHandles().toArray(new String[0])[1]);

    // 34. Is 'tutarOnForm' visible?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.xpath("//strong[3]");
    driver.findElement(by).isDisplayed();
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 35. Does 'TalimatFormuTutar' contain '{{provizyonTutari}}'?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.xpath("//label[normalize-space()='Tutar']/../../following-sibling::label");
    Assertions.assertTrue(driver.findElement(by).getText().contains(provizyonTutari));
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 36. Close window with index '1'
    driver.close();

    // 37. Switch to window '0'
    driver.switchTo().window(driver.getWindowHandles().toArray(new String[0])[0]);

    // 38. Move mouse to 'btnTalimatFormuFromİslemDetaylari'
    by = By.xpath("//form/div[1]/div[2]//div[2]");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 39. Click 'Mail Gönder'
    by = By.cssSelector("#sendMail");
    driver.findElement(by).click();

    // 40. Type '{{odemeEmail}}' in 'email'
    by = By.cssSelector("#email");
    driver.findElement(by).sendKeys(ProjectParameters.odemeEmail);

    // 41. Click 'Gönder'
    by = By.xpath("//button[. = 'Gönder']");
    driver.findElement(by).click();

    // 42. Does 'txtMailSendingResultMessage' contain '{{odemeEmail}} adresine ödeme talimat formu başarıyla gönderildi'?
    by = By.xpath("//div/div[2]/div[1]/div/div");
    Assertions.assertTrue(driver.findElement(by).getText().contains(String.format("%s adresine ödeme talimat formu başarıyla gönderildi",ProjectParameters.odemeEmail)));

    // 43. Output searched string in specific mail
    //    E-Mail Okuyucu PDF okumadığı için ilgili addona bakım yapana kadar disable edilmiştir.
    /* Step is disabled
    readSpecificsMail = ImapMailOperations.readSpecificsMail(ProjectParameters.odemeEmail,ProjectParameters.yandexMailKey,"56154P0000033046","C:\\TestProject\\mail\\C548.html");
    readSpecificsMail = (ImapMailOperations.ReadSpecificsMail)((ReportingDriver)driver).addons().execute(readSpecificsMail);
    */
    // 44. Navigate to 'file:///C:\TestProject\mail\C548.html'
    /* Step is disabled
    driver.navigate().to("file:///C:\\TestProject\\mail\\C548.html");
    */
    // 45. Is 'referansNoOnMailText' visible?
    /* Step is disabled
    by = By.xpath("//span[contains(text(),'NT56154P0000018459')] ");
    driver.findElement(by).isDisplayed();
    */
  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon.netahsilatdemo.com/Account/LogOff","","","","","","","otomasyon@e-cozum.com","kY2*m5J",""));
  }
}
