package netahsilat;

import io.testproject.addon.CombinedActions;
import io.testproject.addon.VisibleElementsOperations;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C2019 Email Order Tanımları - 1 den fazla kişiye gönderilsin
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Fri Oct 07 11:24:32 GMT 2022.
 */
@DisplayName("C2019 Email Order Tanımları - 1 den fazla kişiye gönderilsin")
public class C2019 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C2019 Email Order Tanımları - 1 den fazla kişiye gönderilsin")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String userName, String password) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodLogoutlogin methodlogoutlogin;
    CombinedActions.ClearAndTypeAction clearAndTypeAction;
    VisibleElementsOperations.ClickIfVisibleWeb clickIfVisibleWeb;

    // 1. Run Method Logout&Login
    GeneratedUtils.sleep(500);
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ApplicationURL;
    methodlogoutlogin.userName = ProjectParameters.genelEmail;
    methodlogoutlogin.password = ProjectParameters.genelPassword;
    methodlogoutlogin.execute(driver);

    // 2. Move mouse to 'moveToSiteYönetimi'
    by = By.cssSelector("li[class='config']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 3. Click 'moveToSiteYönetimi'
    by = By.cssSelector("li[class='config']");
    driver.findElement(by).click();

    // 4. Click 'btnParametreler'
    by = By.cssSelector("a[title='PARAMETRELER']");
    driver.findElement(by).click();

    // 5. Click 'li > a > E-Mail Order Tanımları'
    by = By.xpath("//a[normalize-space()='E-Mail Order Tanımları']");
    driver.findElement(by).click();

    // 6. Click '1 den fazla kişiye gönderilsin (Unchecked)' if it's visible
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);
    clickIfVisibleWeb = VisibleElementsOperations.clickIfVisibleWeb("");
    by = By.xpath("//label[normalize-space()='1 den fazla kişiye gönderilsin']//..//following-sibling::div//span[@class='jquery-safari-checkbox jquery-safari-checkbox-checked']");
    clickIfVisibleWeb = (VisibleElementsOperations.ClickIfVisibleWeb)((ReportingDriver)driver).addons().execute(clickIfVisibleWeb, by, -1);
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 7. Is 'Kaydet1' visible?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.cssSelector("#kaydet");
    driver.findElement(by).isDisplayed();
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 8. Click 'Kaydet1'
    by = By.cssSelector("#kaydet");
    driver.findElement(by).click();

    // 9. Move mouse to 'moveUstUyeYonetimi'
    by = By.cssSelector("li[class='content']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 10. Click 'moveUstUyeYonetimi'
    by = By.cssSelector("li[class='content']");
    driver.findElement(by).click();

    // 11. Click 'dropDownOdemeLinki'
    by = By.xpath("//li[2]/div/img");
    driver.findElement(by).click();

    // 12. Click 'ÜYELİKSİZ ÖDEME LİNKİ'
    by = By.xpath("//a[. = 'ÜYELİKSİZ ÖDEME LİNKİ']");
    driver.findElement(by).click();

    // 13. Is 'PureAmount' visible?
    by = By.cssSelector("#PureAmount");
    driver.findElement(by).isDisplayed();

    // 14. Run Clear 'PureAmount' contents and type '100'
    clearAndTypeAction = CombinedActions.clearAndTypeAction("100");
    by = By.cssSelector("#PureAmount");
    clearAndTypeAction = (CombinedActions.ClearAndTypeAction)((ReportingDriver)driver).addons().execute(clearAndTypeAction, by, -1);

    // 15. Click 'Devam et Button'
    /* Step is disabled
    by = By.cssSelector("input[value='Devam Et']");
    driver.findElement(by).click();
    */
    // 16. Click 'Devam Et Button'
    by = By.xpath("//input[@class='big-button']");
    driver.findElement(by).click();

    // 17. Run Clear 'EMail' contents and type 'a@a.com'
    clearAndTypeAction = CombinedActions.clearAndTypeAction("a@a.com");
    by = By.cssSelector("#EMail");
    clearAndTypeAction = (CombinedActions.ClearAndTypeAction)((ReportingDriver)driver).addons().execute(clearAndTypeAction, by, -1);

    // 18. Click 'Ekle'
    by = By.xpath("//button[. = 'Ekle']");
    driver.findElement(by).click();

    // 19. Is 'Ekle Button (Disable)' visible?
    by = By.xpath("//button[@type='button' and @data-bind='click: addItem, disable: hasUser']");
    driver.findElement(by).isDisplayed();

    // 20. Move mouse to 'moveToSiteYönetimi'
    by = By.cssSelector("li[class='config']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 21. Click 'moveToSiteYönetimi'
    by = By.cssSelector("li[class='config']");
    driver.findElement(by).click();

    // 22. Click 'btnParametreler'
    by = By.cssSelector("a[title='PARAMETRELER']");
    driver.findElement(by).click();

    // 23. Click 'li > a > E-Mail Order Tanımları'
    by = By.xpath("//a[normalize-space()='E-Mail Order Tanımları']");
    driver.findElement(by).click();

    // 24. Click '1 den fazla kişiye gönderilsin (Checked)'
    by = By.xpath("//label[normalize-space()='1 den fazla kişiye gönderilsin']//..//following-sibling::div//span[@class='jquery-safari-checkbox']");
    driver.findElement(by).click();

    // 25. Is 'Kaydet1' visible?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.cssSelector("#kaydet");
    driver.findElement(by).isDisplayed();
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 26. Click 'Kaydet1'
    by = By.cssSelector("#kaydet");
    driver.findElement(by).click();

    // 27. Move mouse to 'moveUstUyeYonetimi'
    by = By.cssSelector("li[class='content']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 28. Click 'moveUstUyeYonetimi'
    by = By.cssSelector("li[class='content']");
    driver.findElement(by).click();

    // 29. Click 'dropDownOdemeLinki'
    by = By.xpath("//li[2]/div/img");
    driver.findElement(by).click();

    // 30. Click 'ÜYELİKSİZ ÖDEME LİNKİ'
    by = By.xpath("//a[. = 'ÜYELİKSİZ ÖDEME LİNKİ']");
    driver.findElement(by).click();

    // 31. Pause for '2000'ms
    /* Step is disabled
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);
    */
    // 32. Run Clear 'PureAmount' contents and type '300,00'
    clearAndTypeAction = CombinedActions.clearAndTypeAction("300,00");
    by = By.cssSelector("#PureAmount");
    clearAndTypeAction = (CombinedActions.ClearAndTypeAction)((ReportingDriver)driver).addons().execute(clearAndTypeAction, by, -1);

    // 33. Click 'Devam et Button'
    /* Step is disabled
    by = By.cssSelector("input[value='Devam Et']");
    driver.findElement(by).click();
    */
    // 34. Click 'Devam Et Button'
    by = By.xpath("//input[@class='big-button']");
    driver.findElement(by).click();

    // 35. Run Clear 'EMail' contents and type 'a@a.com'
    clearAndTypeAction = CombinedActions.clearAndTypeAction("a@a.com");
    by = By.cssSelector("#EMail");
    clearAndTypeAction = (CombinedActions.ClearAndTypeAction)((ReportingDriver)driver).addons().execute(clearAndTypeAction, by, -1);

    // 36. Click 'Ekle'
    by = By.xpath("//button[. = 'Ekle']");
    driver.findElement(by).click();

    // 37. Is 'Ekle Button (Enable)' visible?
    by = By.xpath("//button[@type='button' and @data-bind='click: addItem']");
    driver.findElement(by).isDisplayed();

    // 38. Run Clear 'EMail' contents and type 'b@b.com'
    clearAndTypeAction = CombinedActions.clearAndTypeAction("b@b.com");
    by = By.cssSelector("#EMail");
    clearAndTypeAction = (CombinedActions.ClearAndTypeAction)((ReportingDriver)driver).addons().execute(clearAndTypeAction, by, -1);

    // 39. Click 'Ekle'
    by = By.xpath("//button[. = 'Ekle']");
    driver.findElement(by).click();

    // 40. Does 'a@a.com' contain 'a@a.com'?
    by = By.xpath("//td[. = 'a@a.com']");
    Assertions.assertTrue(driver.findElement(by).getText().contains("a@a.com"));

    // 41. Does 'b@b.com' contain 'b@b.com'?
    by = By.xpath("//td[. = 'b@b.com']");
    Assertions.assertTrue(driver.findElement(by).getText().contains("b@b.com"));

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon.netahsilatdemo.com/Account/LogOff","otomasyon@test.com","Kd!cyhz4"));
  }
}
