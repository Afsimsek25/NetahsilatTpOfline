package netahsilat;


import io.testproject.addon.DateTimeOperations;
import io.testproject.addon.StringUtils;
import io.testproject.addon.WebExtensions;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C325 Son İşlemler
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Tue Sep 27 19:34:53 GMT 2022.
 */
@DisplayName("C325 Son İşlemler")
public class C325 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C325 Son İşlemler")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String userName, String password, String odemeTutari,
      String provizyonTutari, String Tutar, String odemeTarihi, String odemeTutari2) throws
      Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodLogoutlogin methodlogoutlogin;
    String string;
    DateTimeOperations.GetDateInFormat getDateInFormat;
    StringUtils.ExtractStringUsingRegex extractStringUsingRegex;
    StringUtils.ReplaceSubstrings replaceSubstrings;
    WebExtensions.SetElementAttribute setElementAttribute;
    StringUtils.StringContains stringContains;

    // 1. Run Method Logout&Login
    GeneratedUtils.sleep(500);
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ApplicationURL;
    methodlogoutlogin.userName = ProjectParameters.genelEmail;
    methodlogoutlogin.password = ProjectParameters.genelPassword;
    methodlogoutlogin.execute(driver);

    // 2. Set 'style' attribute value on 'Son işlemler > paymenttrue.png ../li'
    /* Step is disabled
    setElementAttribute = WebExtensions.setElementAttribute("style","");
    by = By.xpath("//img[contains(@src, '/paymenttrue.png')]/..");
    setElementAttribute = (WebExtensions.SetElementAttribute)((ReportingDriver)driver).addons().execute(setElementAttribute, by, -1);
    */
    // 3. Set 'style' attribute value on 'Son işlemler > paymentfalse.png ../li'
    /* Step is disabled
    setElementAttribute = WebExtensions.setElementAttribute("style","display:none;");
    by = By.xpath("//h1[. = 'Son İşlemler']/../..//li[not(contains(@style,'display:none;'))]//img[contains(@src, 'paymentfalse.png')]//..");
    setElementAttribute = (WebExtensions.SetElementAttribute)((ReportingDriver)driver).addons().execute(setElementAttribute, by, -1);
    */
    // 4. Set 'style' attribute value on 'Son İşlemler > ul'
    //    Son İşlemler style değiştirilerek height yükseltiliyor.
    setElementAttribute = WebExtensions.setElementAttribute("style","overflow: hidden; height: 1200px;");
    by = By.xpath("//h1[. = 'Son İşlemler']//..//..//ul[contains(@class,'small-files-list1')]");
    setElementAttribute = (WebExtensions.SetElementAttribute)((ReportingDriver)driver).addons().execute(setElementAttribute, by, -1);

    // 5. Set 'class' attribute value on 'Son İşlemler > ul > li > class absolute'
    //    Son işlemler altındaki her kayıttan class absolute kaldırılarak görünür olması sağlanıyor.
    for (int i = 1; i <= 15; i++) {
      setElementAttribute = WebExtensions.setElementAttribute("class","");
      by = By.xpath("//h1[.='Son İşlemler']/../../ul/li[@class=\"absolute\"]");
      setElementAttribute = (WebExtensions.SetElementAttribute)((ReportingDriver)driver).addons().execute(setElementAttribute, by, -1);
    }

    // 6. Is 'Son İşlemler > Tutar' visible?
    by = By.xpath("//img[contains(@src, 'images/paymenttrue')]/..//a[contains(text(),'Ödeme : ')][1]/small[contains(text(),'Tutar : ')]//following-sibling::small ");
    driver.findElement(by).isDisplayed();

    // 7. Get text from 'Son İşlemler > Tutar'
    //    odemeTutarı alınıyor
    by = By.xpath("//img[contains(@src, 'images/paymenttrue')]/..//a[contains(text(),'Ödeme : ')][1]/small[contains(text(),'Tarih : ')]");
    string = driver.findElement(by).getAttribute("value");
    odemeTutari = String.valueOf(string);

    // 8. Get text from 'Son İşlemler > Tarih'
    by = By.xpath("(//img[contains(@src, 'images/paymenttrue')]/..//a[contains(text(),'Ödeme : ')][1]/small[contains(text(),'Tarih : ')])[1]");
    odemeTarihi = driver.findElement(by).getText();


    // 9. Click 'Son İşlemler / Ödeme :  '
    by = By.xpath("(//a[contains(text(),'Ödeme : ')])[1]");
    driver.findElement(by).click();

    // 10. Is 'İşlem Detayları' visible?
    by = By.xpath("//h1[. = 'İşlem Detayları']");
    driver.findElement(by).isDisplayed();

    // 11. Extract Sub-String from '{{odemeTarihi}}' using '\d{1,2}.\d{1,2}.\d{2,4} \d{1,2}:\d{2}'
    //    TARIH : dd.MM.yyyy HH:mm:ss içinden dd.MM.yyyy HH:mm alınması sağlandı.
    extractStringUsingRegex = StringUtils.extractStringUsingRegex("\\d{1,2}.\\d{1,2}.\\d{2,4} \\d{1,2}:\\d{2}",odemeTarihi);
    extractStringUsingRegex = (StringUtils.ExtractStringUsingRegex)((ReportingDriver)driver).addons().execute(extractStringUsingRegex);
    odemeTarihi = String.valueOf(extractStringUsingRegex.output);

    // 12. Format currentDateTime '{{odemeTarihi}}' as 'dd.MM.yy HH:mm'
    //    Regex ile gelen dd.MM.yyyy HH:mm > dd.MM.yy HH:mm çevriliyor.
    /* Step is disabled
    getDateInFormat = DateTimeOperations.getDateInFormat(odemeTarihi,"dd.MM.yyyy HH:mm","dd.MM.yy HH:mm","");
    getDateInFormat = (DateTimeOperations.GetDateInFormat)((ReportingDriver)driver).addons().execute(getDateInFormat);
    odemeTarihi = String.valueOf(getDateInFormat.result);
    */
    // 13. Get text from 'Tutar Çıktısı'
    //    odemeTutarı2 alınıyor
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.xpath("//div[normalize-space()='Tutar']//following-sibling::div");
    string = driver.findElement(by).getAttribute("value");
    odemeTutari2 = String.valueOf(string);
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 14. Replace all occurrences of '.' with '[NONE]' in '{{odemeTutari2}}'
    //    odemeTutari2 de nokta var ise replace ile kaldırılarak odemeTutari ile equals ediliyor.
    replaceSubstrings = StringUtils.replaceSubstrings(odemeTutari2,".","");
    replaceSubstrings = (StringUtils.ReplaceSubstrings)((ReportingDriver)driver).addons().execute(replaceSubstrings);
    odemeTutari2 = String.valueOf(replaceSubstrings.result);

    // 15. Does 'İşlem Tarihi Çıktısı' contain '{{odemeTarihi}}'?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(1000, TimeUnit.MILLISECONDS);
    by = By.xpath("//div[normalize-space()='İşlem Tarihi']//following-sibling::div");
    Assertions.assertTrue(driver.findElement(by).getText().contains(odemeTarihi));
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 16. Is 'Yazdır' visible?
    by = By.xpath("//a[. = 'Yazdır']");
    driver.findElement(by).isDisplayed();

    // 17. Is 'Yazdır' is clickable?
    by = By.xpath("//a[. = 'Yazdır']");
    (new WebDriverWait(driver, 15)).until(ExpectedConditions.elementToBeClickable(by));

    // 18. Is 'Talimat Formu' visible?
    by = By.xpath("//form/div/div[2]//div[2]");
    driver.findElement(by).isDisplayed();

    // 19. Move mouse to 'btnTalimatFormuFromİslemDetaylari'
    by = By.xpath("//form/div[1]/div[2]//div[2]");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 20. Is 'Mail Gönder' is clickable?
    by = By.cssSelector("#sendMail");
    (new WebDriverWait(driver, 15)).until(ExpectedConditions.elementToBeClickable(by));

    // 21. Click 'Görüntüle'
    by = By.cssSelector("#print");
    driver.findElement(by).click();

    // 22. Is '{{provizyonTutari}}' contains '{{Tutar}}'?
    stringContains = StringUtils.stringContains(provizyonTutari,Tutar,false,"true");
    stringContains = (StringUtils.StringContains)((ReportingDriver)driver).addons().execute(stringContains);

    // 23. Click 'btnCloseNoPayment'
    by = By.cssSelector("#btnCloseNoPayment");
    driver.findElement(by).click();

    // 24. Click 'btnKapat'
    by = By.xpath("//button[. = 'Kapat']");
    driver.findElement(by).click();

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon.netahsilatdemo.com/Account/LogOff","","","","127","127","",""));
  }
}
