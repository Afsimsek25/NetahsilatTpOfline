package netahsilat;

import io.testproject.addon.RandomDataGenerator;
import io.testproject.addon.WebExtensions;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C555 Güncelle
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Wed Oct 05 07:48:16 GMT 2022.
 */
@DisplayName("C555 Güncelle")
public class C555 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C555 Güncelle")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String userName, String password, String gridHeaders,
      String currentDateTime, String randomNumber) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodRefreshLoadingControl methodrefreshloadingcontrol;
    MethodLogoutlogin methodlogoutlogin;
    WebExtensions.SelectOptionbyVisibleText selectOptionbyVisibleText;
    RandomDataGenerator.GenerateNumberInRange generateNumberInRange;

    // 1. Run Method Logout&Login
    GeneratedUtils.sleep(500);
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ApplicationURL;
    methodlogoutlogin.userName = ProjectParameters.genelEmail;
    methodlogoutlogin.password = ProjectParameters.genelPassword;
    methodlogoutlogin.execute(driver);

    // 2. Move mouse to 'moveToIslemler'
    by = By.cssSelector("li[class='tag']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 3. Click 'İŞLEMLER1'
    by = By.xpath("//a[. = 'İŞLEMLER']");
    driver.findElement(by).click();

    // 4. Click 'ÖDEME LİNKİ LİSTESİ'
    by = By.xpath("//a[. = 'ÖDEME LİNKİ LİSTESİ']");
    driver.findElement(by).click();

    // 5. This test was auto generated from steps of the 'C1909-Listelerde ki verilerin maskelenmesi' test
    methodrefreshloadingcontrol = new MethodRefreshLoadingControl();
    methodrefreshloadingcontrol.execute(driver);

    // 6. Select options in 'SelectedMailOrderStatusId' with text '[NONE]'
    selectOptionbyVisibleText = WebExtensions.selectOptionbyVisibleText("İstek Gönderildi");
    by = By.cssSelector("#SelectedMailOrderStatusId");
    selectOptionbyVisibleText = (WebExtensions.SelectOptionbyVisibleText)((ReportingDriver)driver).addons().execute(selectOptionbyVisibleText, by, -1);

    // 7. Select options in 'SelectedVendorTypeId' with text '[NONE]'
    selectOptionbyVisibleText = WebExtensions.selectOptionbyVisibleText("Üyeliksiz");
    by = By.cssSelector("#SelectedVendorTypeId");
    selectOptionbyVisibleText = (WebExtensions.SelectOptionbyVisibleText)((ReportingDriver)driver).addons().execute(selectOptionbyVisibleText, by, -1);

    // 8. Click 'btnListele'
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.xpath("//button[. = 'Listele']");
    driver.findElement(by).click();
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 9. This test was auto generated from steps of the 'C1909-Listelerde ki verilerin maskelenmesi' test
    methodrefreshloadingcontrol = new MethodRefreshLoadingControl();
    methodrefreshloadingcontrol.execute(driver);

    // 10. Click 'imgGuncelleOdemeLinki'
    by = By.xpath("(//img[contains(@src,'edit.png')])[1]");
    driver.findElement(by).click();

    // 11. Clear 'FullName' contents
    by = By.cssSelector("#FullName");
    driver.findElement(by).clear();

    // 12. Generate random number between '100' and '999'
    generateNumberInRange = RandomDataGenerator.generateNumberInRange("100","999");
    generateNumberInRange = (RandomDataGenerator.GenerateNumberInRange)((ReportingDriver)driver).addons().execute(generateNumberInRange);
    randomNumber = String.valueOf(generateNumberInRange.result);

    // 13. Type 'C555 güncellendi {{randomNumber}}' in 'FullName'
    by = By.cssSelector("#FullName");
    driver.findElement(by).sendKeys(String.format("C555 güncellendi %s",randomNumber));

    // 14. Clear 'PureAmountDecimal' contents
    by = By.cssSelector("#PureAmountDecimal");
    driver.findElement(by).clear();

    // 15. Type '{{randomNumber}},12' in 'PureAmountDecimal'
    by = By.cssSelector("#PureAmountDecimal");
    driver.findElement(by).sendKeys(String.format("%s,12",randomNumber));

    // 16. Clear 'EmailOrderExpireDate' contents
    by = By.cssSelector("#EmailOrderExpireDate");
    driver.findElement(by).clear();

    // 17. Type '23.12.2035 05:05:05' in 'EmailOrderExpireDate'
    by = By.cssSelector("#EmailOrderExpireDate");
    driver.findElement(by).sendKeys("23.12.2035 05:05:05");

    // 18. Send 'ENTER' key(s)
    by = By.cssSelector("#EmailOrderExpireDate");
    (new Actions(driver)).sendKeys(GeneratedUtils.getKeys("ENTER")).build().perform();

    // 19. Click 'buttonKaydiTamamla'
    by = By.xpath("//button[. = 'Tamam']");
    driver.findElement(by).click();

    // 20. Does 'tutarColumnOdemeLinkiGrid' contain '{{randomNumber}},12₺'?
    by = By.xpath("//div[2]/div/table/tbody/tr[1]/td[3]");
    Assertions.assertTrue(driver.findElement(by).getText().contains(String.format("%s,12₺",randomNumber)));

    // 21. Does 'bayiAdıColumnOdemeLinkiGrid' contain 'C555 güncellendi {{randomNumber}}'?
    by = By.xpath("//div[2]/div/table/tbody/tr[1]/td[5]");
    Assertions.assertTrue(driver.findElement(by).getText().contains(String.format("C555 güncellendi %s",randomNumber)));

    // 22. Does 'sonÖdemeTarihi' contain '23.12.2035 05:05:05'?
    by = By.xpath("//tr[1]/td[9]");
    Assertions.assertTrue(driver.findElement(by).getText().contains("23.12.2035 05:05:05"));

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon.netahsilatdemo.com/Account/LogOff","otomasyon@test.com","Kd!cyhz4","","",""));
  }
}
