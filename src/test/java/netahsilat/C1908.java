package netahsilat;

import io.testproject.addon.CombinedActions;
import io.testproject.addon.VisibleElementsOperations;
import io.testproject.addon.WebExtensions;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;

import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

/**
 * This class was automatically generated by TestProject
 * Project: Quality Museum Project
 * Test: C1908 KrediKartSahibi dinamik alanının eklenmesi (NTH-14921 )
 * Generated by: Ahmet Furkan SIMSEK (furkan.simsek@qualitymuseum.com)
 * Generated on Fri Oct 07 11:18:03 GMT 2022.
 */
@DisplayName("C1908 KrediKartSahibi dinamik alanının eklenmesi (NTH-14921 )")
public class C1908 implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("wThDxIHw4zNaCydjAhcfe81WrQPYlMBFI7FPwUwV8M41", new ChromeOptions(), "Ahmet Furkan SIMSEK");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("C1908 KrediKartSahibi dinamik alanının eklenmesi (NTH-14921 )")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String userName, String password, String kartNo, String CVV,
      String ayYil) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    MethodLogoutlogin methodlogoutlogin;
    MethodParametrikdemesadeceKartBilgisi methodparametrikdemesadecekartbilgisi;
    WebExtensions.SelectOptionbyVisibleText selectOptionbyVisibleText;
    CombinedActions.ClearAndTypeAction clearAndTypeAction;
    VisibleElementsOperations.ClickIfVisibleWeb clickIfVisibleWeb;

    // 1. Run Method Logout&Login
    GeneratedUtils.sleep(500);
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ApplicationURL;
    methodlogoutlogin.userName = ProjectParameters.genelEmail;
    methodlogoutlogin.password = ProjectParameters.genelPassword;
    methodlogoutlogin.execute(driver);

    // 2. Move mouse to 'moveToSiteYönetimi'
    by = By.cssSelector("li[class='config']");
    (new Actions(driver)).moveToElement(driver.findElement(by)).perform();

    // 3. Click 'moveToSiteYönetimi'
    by = By.cssSelector("li[class='config']");
    driver.findElement(by).click();

    // 4. Click 'btnParametreler'
    by = By.cssSelector("a[title='PARAMETRELER']");
    driver.findElement(by).click();

    // 5. Click 'li > a > Ön Bilgilendirme Formu'
    by = By.xpath("//a[normalize-space()='Ön Bilgilendirme Formu']");
    driver.findElement(by).click();

    // 6. Select options in 'PreInformationForm.Visible' with text '[NONE]'
    selectOptionbyVisibleText = WebExtensions.selectOptionbyVisibleText("Aktif - Açık");
    by = By.cssSelector("[name='PreInformationForm.Visible']");
    selectOptionbyVisibleText = (WebExtensions.SelectOptionbyVisibleText)((ReportingDriver)driver).addons().execute(selectOptionbyVisibleText, by, -1);

    // 7. Click 'Müşteri (Checked)' if it's visible
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);
    clickIfVisibleWeb = VisibleElementsOperations.clickIfVisibleWeb("0");
    by = By.xpath("//label[normalize-space()='Müşteri']//..//following-sibling::div//span[@class='jquery-safari-checkbox']");
    clickIfVisibleWeb = (VisibleElementsOperations.ClickIfVisibleWeb)((ReportingDriver)driver).addons().execute(clickIfVisibleWeb, by, -1);
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 8. Click 'Üyeliksiz (Checked)' if it's visible
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);
    clickIfVisibleWeb = VisibleElementsOperations.clickIfVisibleWeb("0");
    by = By.xpath("//label[normalize-space()='Üyeliksiz']//..//following-sibling::div//span[@class='jquery-safari-checkbox']");
    clickIfVisibleWeb = (VisibleElementsOperations.ClickIfVisibleWeb)((ReportingDriver)driver).addons().execute(clickIfVisibleWeb, by, -1);
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 9. Is 'editorToolbar' visible?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.xpath("//div[contains(@id,'toolbargroup') and not(contains(@id,'Locales' ))]");
    driver.findElement(by).isDisplayed();
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 10. Click 'Kaydet1'
    by = By.cssSelector("#kaydet");
    driver.findElement(by).click();

    // 11. Is 'Ön Bilgilendirme Formu Başarıyla kayd...' visible?
    by = By.xpath("//li[. = 'Ön Bilgilendirme Formu Başarıyla kaydedildi.']");
    driver.findElement(by).isDisplayed();

    // 12. Run Method Logout&Login
    methodlogoutlogin = new MethodLogoutlogin();
    methodlogoutlogin.ApplicationURL = ApplicationURL;
    methodlogoutlogin.userName = "netahsilatotomasyon@yandex.com";
    methodlogoutlogin.password = password;
    methodlogoutlogin.execute(driver);

    // 13. Is 'ön bilgilendirme formu body' visible?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.xpath("//span[. = 'ön bilgilendirme formu body ']");
    driver.findElement(by).isDisplayed();
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 14. Run Method Parametrik Ödeme (Sadece Kart Bilgisi)
    methodparametrikdemesadecekartbilgisi = new MethodParametrikdemesadeceKartBilgisi();
    methodparametrikdemesadecekartbilgisi.kartNo = kartNo;
    methodparametrikdemesadecekartbilgisi.CVV = CVV;
    methodparametrikdemesadecekartbilgisi.ayYil = ayYil;
    methodparametrikdemesadecekartbilgisi.execute(driver);

    // 15. Run Clear 'TKC' contents and type '11111111110'
    clearAndTypeAction = CombinedActions.clearAndTypeAction("11111111110");
    by = By.cssSelector("#TKC");
    clearAndTypeAction = (CombinedActions.ClearAndTypeAction)((ReportingDriver)driver).addons().execute(clearAndTypeAction, by, -1);

    // 16. Is 'Spinner (Loading)' visible?
    /* Step is disabled
    by = By.cssSelector("div.spinner");
    driver.findElement(by).isDisplayed();
    */
    // 17. Is 'Spinner (Loading)' not present or invisible?
    /* Step is disabled
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(2000, TimeUnit.MILLISECONDS);
    by = By.cssSelector("div.spinner");
    (new WebDriverWait(driver, 2)).until(ExpectedConditions.invisibilityOf(driver.findElement(by)));
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    */
    // 18. Does 'Od**** Us****' contain 'Od**** Us****'?
    // set step-specific timeout (will undo this at the end)
    driver.manage().timeouts().implicitlyWait(35000, TimeUnit.MILLISECONDS);
    by = By.cssSelector("#KREDIKARTSAHIBI");
    Assertions.assertTrue(driver.findElement(by).getText().contains("Od**** Us****"));
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);

    // 19. Does '43550843****43581' contain '43550843****4358'?
    by = By.cssSelector("#KARTNO");
    Assertions.assertTrue(driver.findElement(by).getText().contains("43550843****4358"));

    // 20. Does '71249112816' contain '71249112816'?
    by = By.cssSelector("#UYE_TCKN");
    Assertions.assertTrue(driver.findElement(by).getText().contains("71249112816"));

    // 21. Does '11111111110' contain '11111111110'?
    by = By.cssSelector("#KREDIKARTSAHIBITCKN");
    Assertions.assertTrue(driver.findElement(by).getText().contains("11111111110"));

    // 22. Send 'ENTER' key(s)
    (new Actions(driver)).sendKeys(GeneratedUtils.getKeys("ENTER")).build().perform();

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://otomasyon.netahsilatdemo.com/Account/LogOff","otomasyon@test.com","Kd!cyhz4","","",""));
  }
}
